// source: user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.user.Address', null, global);
goog.exportSymbol('proto.user.Addresses', null, global);
goog.exportSymbol('proto.user.Bid', null, global);
goog.exportSymbol('proto.user.Biditem', null, global);
goog.exportSymbol('proto.user.Biditems', null, global);
goog.exportSymbol('proto.user.Bids', null, global);
goog.exportSymbol('proto.user.Booking', null, global);
goog.exportSymbol('proto.user.Bookings', null, global);
goog.exportSymbol('proto.user.Confirmcode', null, global);
goog.exportSymbol('proto.user.Confirmcodes', null, global);
goog.exportSymbol('proto.user.Customer', null, global);
goog.exportSymbol('proto.user.Customers', null, global);
goog.exportSymbol('proto.user.Delay', null, global);
goog.exportSymbol('proto.user.Delays', null, global);
goog.exportSymbol('proto.user.Guarantee', null, global);
goog.exportSymbol('proto.user.Guarantees', null, global);
goog.exportSymbol('proto.user.Invoice', null, global);
goog.exportSymbol('proto.user.Invoices', null, global);
goog.exportSymbol('proto.user.Item', null, global);
goog.exportSymbol('proto.user.Items', null, global);
goog.exportSymbol('proto.user.Service', null, global);
goog.exportSymbol('proto.user.Services', null, global);
goog.exportSymbol('proto.user.Task', null, global);
goog.exportSymbol('proto.user.Task.Taskstatus', null, global);
goog.exportSymbol('proto.user.Tasks', null, global);
goog.exportSymbol('proto.user.User', null, global);
goog.exportSymbol('proto.user.Users', null, global);
goog.exportSymbol('proto.user.Work', null, global);
goog.exportSymbol('proto.user.Work.Workstatus', null, global);
goog.exportSymbol('proto.user.Worker', null, global);
goog.exportSymbol('proto.user.Workers', null, global);
goog.exportSymbol('proto.user.Works', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.User.displayName = 'proto.user.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Users = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Users.repeatedFields_, null);
};
goog.inherits(proto.user.Users, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Users.displayName = 'proto.user.Users';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Worker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Worker.repeatedFields_, null);
};
goog.inherits(proto.user.Worker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Worker.displayName = 'proto.user.Worker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Workers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Workers.repeatedFields_, null);
};
goog.inherits(proto.user.Workers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Workers.displayName = 'proto.user.Workers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Customer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Customer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Customer.displayName = 'proto.user.Customer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Customers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Customers.repeatedFields_, null);
};
goog.inherits(proto.user.Customers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Customers.displayName = 'proto.user.Customers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Task.repeatedFields_, null);
};
goog.inherits(proto.user.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Task.displayName = 'proto.user.Task';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Tasks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Tasks.repeatedFields_, null);
};
goog.inherits(proto.user.Tasks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Tasks.displayName = 'proto.user.Tasks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Work = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Work, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Work.displayName = 'proto.user.Work';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Works = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Works.repeatedFields_, null);
};
goog.inherits(proto.user.Works, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Works.displayName = 'proto.user.Works';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Delay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Delay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Delay.displayName = 'proto.user.Delay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Delays = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Delays.repeatedFields_, null);
};
goog.inherits(proto.user.Delays, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Delays.displayName = 'proto.user.Delays';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Service = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Service.repeatedFields_, null);
};
goog.inherits(proto.user.Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Service.displayName = 'proto.user.Service';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Services = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Services.repeatedFields_, null);
};
goog.inherits(proto.user.Services, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Services.displayName = 'proto.user.Services';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Invoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Invoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Invoice.displayName = 'proto.user.Invoice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Invoices = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Invoices.repeatedFields_, null);
};
goog.inherits(proto.user.Invoices, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Invoices.displayName = 'proto.user.Invoices';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Guarantee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Guarantee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Guarantee.displayName = 'proto.user.Guarantee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Guarantees = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Guarantees.repeatedFields_, null);
};
goog.inherits(proto.user.Guarantees, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Guarantees.displayName = 'proto.user.Guarantees';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Bid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Bid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Bid.displayName = 'proto.user.Bid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Bids = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Bids.repeatedFields_, null);
};
goog.inherits(proto.user.Bids, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Bids.displayName = 'proto.user.Bids';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Biditem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Biditem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Biditem.displayName = 'proto.user.Biditem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Biditems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Biditems.repeatedFields_, null);
};
goog.inherits(proto.user.Biditems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Biditems.displayName = 'proto.user.Biditems';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Address.displayName = 'proto.user.Address';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Addresses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Addresses.repeatedFields_, null);
};
goog.inherits(proto.user.Addresses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Addresses.displayName = 'proto.user.Addresses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Item.repeatedFields_, null);
};
goog.inherits(proto.user.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Item.displayName = 'proto.user.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Items = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Items.repeatedFields_, null);
};
goog.inherits(proto.user.Items, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Items.displayName = 'proto.user.Items';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Booking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Booking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Booking.displayName = 'proto.user.Booking';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Bookings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Bookings.repeatedFields_, null);
};
goog.inherits(proto.user.Bookings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Bookings.displayName = 'proto.user.Bookings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Confirmcode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Confirmcode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Confirmcode.displayName = 'proto.user.Confirmcode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Confirmcodes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.Confirmcodes.repeatedFields_, null);
};
goog.inherits(proto.user.Confirmcodes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Confirmcodes.displayName = 'proto.user.Confirmcodes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.User.prototype.toObject = function(opt_includeInstance) {
  return proto.user.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    aadhar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    identity: jspb.Message.getFieldWithDefault(msg, 5, ""),
    email: jspb.Message.getFieldWithDefault(msg, 6, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.User}
 */
proto.user.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.User;
  return proto.user.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.User}
 */
proto.user.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAadhar(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAadhar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int64 user_key = 1;
 * @return {number}
 */
proto.user.User.prototype.getUserKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setUserKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.user.User.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_name = 3;
 * @return {string}
 */
proto.user.User.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string aadhar = 4;
 * @return {string}
 */
proto.user.User.prototype.getAadhar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setAadhar = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string identity = 5;
 * @return {string}
 */
proto.user.User.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setIdentity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string email = 6;
 * @return {string}
 */
proto.user.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string phone = 7;
 * @return {string}
 */
proto.user.User.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Users.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Users.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Users.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Users} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Users.toObject = function(includeInstance, msg) {
  var f, obj = {
    musersList: jspb.Message.toObjectList(msg.getMusersList(),
    proto.user.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Users}
 */
proto.user.Users.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Users;
  return proto.user.Users.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Users} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Users}
 */
proto.user.Users.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.User;
      reader.readMessage(value,proto.user.User.deserializeBinaryFromReader);
      msg.addMusers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Users.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Users.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Users} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Users.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMusersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User Musers = 1;
 * @return {!Array<!proto.user.User>}
 */
proto.user.Users.prototype.getMusersList = function() {
  return /** @type{!Array<!proto.user.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.User, 1));
};


/**
 * @param {!Array<!proto.user.User>} value
 * @return {!proto.user.Users} returns this
*/
proto.user.Users.prototype.setMusersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.User}
 */
proto.user.Users.prototype.addMusers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Users} returns this
 */
proto.user.Users.prototype.clearMusersList = function() {
  return this.setMusersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Worker.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Worker.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Worker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Worker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Worker.toObject = function(includeInstance, msg) {
  var f, obj = {
    userkey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    firstName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    aadharId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    passport: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pancard: jspb.Message.getFieldWithDefault(msg, 7, ""),
    driverLicense: jspb.Message.getFieldWithDefault(msg, 8, ""),
    skillsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    designation: jspb.Message.getFieldWithDefault(msg, 10, ""),
    metadata: msg.getMetadata_asB64(),
    email: jspb.Message.getFieldWithDefault(msg, 12, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 13, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Worker}
 */
proto.user.Worker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Worker;
  return proto.user.Worker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Worker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Worker}
 */
proto.user.Worker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAadharId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassport(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPancard(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverLicense(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addSkills(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesignation(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhone(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Worker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Worker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Worker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Worker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserkey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAadharId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getPassport();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPancard();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDriverLicense();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSkillsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getDesignation();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPhone();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * optional int64 userkey = 1;
 * @return {number}
 */
proto.user.Worker.prototype.getUserkey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setUserkey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.user.Worker.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string first_name = 3;
 * @return {string}
 */
proto.user.Worker.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string last_name = 4;
 * @return {string}
 */
proto.user.Worker.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 aadhar_id = 5;
 * @return {number}
 */
proto.user.Worker.prototype.getAadharId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setAadharId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string passport = 6;
 * @return {string}
 */
proto.user.Worker.prototype.getPassport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setPassport = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string pancard = 7;
 * @return {string}
 */
proto.user.Worker.prototype.getPancard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setPancard = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string driver_license = 8;
 * @return {string}
 */
proto.user.Worker.prototype.getDriverLicense = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setDriverLicense = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated string skills = 9;
 * @return {!Array<string>}
 */
proto.user.Worker.prototype.getSkillsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setSkillsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.addSkills = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.clearSkillsList = function() {
  return this.setSkillsList([]);
};


/**
 * optional string designation = 10;
 * @return {string}
 */
proto.user.Worker.prototype.getDesignation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setDesignation = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bytes metadata = 11;
 * @return {!(string|Uint8Array)}
 */
proto.user.Worker.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes metadata = 11;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Worker.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Worker.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional string email = 12;
 * @return {string}
 */
proto.user.Worker.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int64 phone = 13;
 * @return {number}
 */
proto.user.Worker.prototype.getPhone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setPhone = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 created_at = 14;
 * @return {number}
 */
proto.user.Worker.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Worker} returns this
 */
proto.user.Worker.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Workers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Workers.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Workers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Workers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Workers.toObject = function(includeInstance, msg) {
  var f, obj = {
    mworkersList: jspb.Message.toObjectList(msg.getMworkersList(),
    proto.user.Worker.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Workers}
 */
proto.user.Workers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Workers;
  return proto.user.Workers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Workers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Workers}
 */
proto.user.Workers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Worker;
      reader.readMessage(value,proto.user.Worker.deserializeBinaryFromReader);
      msg.addMworkers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Workers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Workers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Workers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Workers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMworkersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Worker.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Worker Mworkers = 1;
 * @return {!Array<!proto.user.Worker>}
 */
proto.user.Workers.prototype.getMworkersList = function() {
  return /** @type{!Array<!proto.user.Worker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Worker, 1));
};


/**
 * @param {!Array<!proto.user.Worker>} value
 * @return {!proto.user.Workers} returns this
*/
proto.user.Workers.prototype.setMworkersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Worker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Worker}
 */
proto.user.Workers.prototype.addMworkers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Worker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Workers} returns this
 */
proto.user.Workers.prototype.clearMworkersList = function() {
  return this.setMworkersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Customer.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Customer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Customer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Customer.toObject = function(includeInstance, msg) {
  var f, obj = {
    userkey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    firstName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 5, 0),
    email: jspb.Message.getFieldWithDefault(msg, 6, ""),
    aadharId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    metadata: msg.getMetadata_asB64(),
    gender: jspb.Message.getFieldWithDefault(msg, 9, ""),
    iden: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Customer}
 */
proto.user.Customer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Customer;
  return proto.user.Customer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Customer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Customer}
 */
proto.user.Customer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhoneNumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAadharId(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setGender(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIden(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Customer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Customer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Customer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Customer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserkey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAadharId();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getGender();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIden();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int64 userkey = 1;
 * @return {number}
 */
proto.user.Customer.prototype.getUserkey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setUserkey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.user.Customer.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string first_name = 3;
 * @return {string}
 */
proto.user.Customer.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string last_name = 4;
 * @return {string}
 */
proto.user.Customer.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 phone_number = 5;
 * @return {number}
 */
proto.user.Customer.prototype.getPhoneNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string email = 6;
 * @return {string}
 */
proto.user.Customer.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 aadhar_id = 7;
 * @return {number}
 */
proto.user.Customer.prototype.getAadharId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setAadharId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes metadata = 8;
 * @return {!(string|Uint8Array)}
 */
proto.user.Customer.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes metadata = 8;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Customer.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Customer.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional string gender = 9;
 * @return {string}
 */
proto.user.Customer.prototype.getGender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setGender = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string iden = 10;
 * @return {string}
 */
proto.user.Customer.prototype.getIden = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Customer} returns this
 */
proto.user.Customer.prototype.setIden = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Customers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Customers.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Customers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Customers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Customers.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcustomersList: jspb.Message.toObjectList(msg.getMcustomersList(),
    proto.user.Customer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Customers}
 */
proto.user.Customers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Customers;
  return proto.user.Customers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Customers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Customers}
 */
proto.user.Customers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Customer;
      reader.readMessage(value,proto.user.Customer.deserializeBinaryFromReader);
      msg.addMcustomers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Customers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Customers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Customers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Customers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcustomersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Customer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Customer Mcustomers = 1;
 * @return {!Array<!proto.user.Customer>}
 */
proto.user.Customers.prototype.getMcustomersList = function() {
  return /** @type{!Array<!proto.user.Customer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Customer, 1));
};


/**
 * @param {!Array<!proto.user.Customer>} value
 * @return {!proto.user.Customers} returns this
*/
proto.user.Customers.prototype.setMcustomersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Customer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Customer}
 */
proto.user.Customers.prototype.addMcustomers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Customer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Customers} returns this
 */
proto.user.Customers.prototype.clearMcustomersList = function() {
  return this.setMcustomersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Task.repeatedFields_ = [14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    taskId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    price: jspb.Message.getFieldWithDefault(msg, 5, 0),
    deno: jspb.Message.getFieldWithDefault(msg, 6, ""),
    scheduledAt: jspb.Message.getFieldWithDefault(msg, 7, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    taskstatus: jspb.Message.getFieldWithDefault(msg, 9, 0),
    metadata: msg.getMetadata_asB64(),
    tasktype: jspb.Message.getFieldWithDefault(msg, 11, ""),
    location: msg.getLocation_asB64(),
    place: jspb.Message.getFieldWithDefault(msg, 13, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    categoryList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
    customerKey: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Task}
 */
proto.user.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Task;
  return proto.user.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Task}
 */
proto.user.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeno(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScheduledAt(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 9:
      var value = /** @type {!proto.user.Task.Taskstatus} */ (reader.readEnum());
      msg.setTaskstatus(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTasktype(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocation(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlace(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addCategory(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCustomerKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDeno();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getScheduledAt();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getTaskstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getTasktype();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getLocation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getPlace();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getCategoryList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getCustomerKey();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.user.Task.Taskstatus = {
  PROGRESS: 0,
  CREATED: 1,
  ACKNOWLEDGE: 2,
  IN_PROGRESS: 3,
  DONE: 4,
  PAID: 5
};

/**
 * optional int64 task_key = 1;
 * @return {number}
 */
proto.user.Task.prototype.getTaskKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setTaskKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string task_id = 2;
 * @return {string}
 */
proto.user.Task.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setTaskId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.user.Task.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 created_at = 4;
 * @return {number}
 */
proto.user.Task.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 price = 5;
 * @return {number}
 */
proto.user.Task.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string deno = 6;
 * @return {string}
 */
proto.user.Task.prototype.getDeno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setDeno = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 scheduled_at = 7;
 * @return {number}
 */
proto.user.Task.prototype.getScheduledAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setScheduledAt = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 duration = 8;
 * @return {number}
 */
proto.user.Task.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional Taskstatus taskstatus = 9;
 * @return {!proto.user.Task.Taskstatus}
 */
proto.user.Task.prototype.getTaskstatus = function() {
  return /** @type {!proto.user.Task.Taskstatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.user.Task.Taskstatus} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setTaskstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional bytes metadata = 10;
 * @return {!(string|Uint8Array)}
 */
proto.user.Task.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes metadata = 10;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Task.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Task.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional string tasktype = 11;
 * @return {string}
 */
proto.user.Task.prototype.getTasktype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setTasktype = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bytes location = 12;
 * @return {!(string|Uint8Array)}
 */
proto.user.Task.prototype.getLocation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes location = 12;
 * This is a type-conversion wrapper around `getLocation()`
 * @return {string}
 */
proto.user.Task.prototype.getLocation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocation()));
};


/**
 * optional bytes location = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocation()`
 * @return {!Uint8Array}
 */
proto.user.Task.prototype.getLocation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setLocation = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional string place = 13;
 * @return {string}
 */
proto.user.Task.prototype.getPlace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setPlace = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * repeated string tags = 14;
 * @return {!Array<string>}
 */
proto.user.Task.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated string category = 15;
 * @return {!Array<string>}
 */
proto.user.Task.prototype.getCategoryList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setCategoryList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.addCategory = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.clearCategoryList = function() {
  return this.setCategoryList([]);
};


/**
 * optional int64 customer_key = 16;
 * @return {number}
 */
proto.user.Task.prototype.getCustomerKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Task} returns this
 */
proto.user.Task.prototype.setCustomerKey = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Tasks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Tasks.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Tasks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Tasks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Tasks.toObject = function(includeInstance, msg) {
  var f, obj = {
    mtasksList: jspb.Message.toObjectList(msg.getMtasksList(),
    proto.user.Task.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Tasks}
 */
proto.user.Tasks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Tasks;
  return proto.user.Tasks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Tasks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Tasks}
 */
proto.user.Tasks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Task;
      reader.readMessage(value,proto.user.Task.deserializeBinaryFromReader);
      msg.addMtasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Tasks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Tasks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Tasks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Tasks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMtasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Task.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Task Mtasks = 1;
 * @return {!Array<!proto.user.Task>}
 */
proto.user.Tasks.prototype.getMtasksList = function() {
  return /** @type{!Array<!proto.user.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Task, 1));
};


/**
 * @param {!Array<!proto.user.Task>} value
 * @return {!proto.user.Tasks} returns this
*/
proto.user.Tasks.prototype.setMtasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Task}
 */
proto.user.Tasks.prototype.addMtasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Tasks} returns this
 */
proto.user.Tasks.prototype.clearMtasksList = function() {
  return this.setMtasksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Work.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Work.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Work} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Work.toObject = function(includeInstance, msg) {
  var f, obj = {
    workKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    taskKey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    workerKey: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    workStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    metadata: msg.getMetadata_asB64(),
    workId: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Work}
 */
proto.user.Work.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Work;
  return proto.user.Work.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Work} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Work}
 */
proto.user.Work.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorkKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorkerKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {!proto.user.Work.Workstatus} */ (reader.readEnum());
      msg.setWorkStatus(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Work.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Work.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Work} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Work.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTaskKey();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getWorkerKey();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWorkStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getWorkId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.user.Work.Workstatus = {
  PROGRESS: 0,
  CREATED: 1,
  DELAYED: 2,
  IN_PROGRESS: 3,
  DONE: 4
};

/**
 * optional int64 work_key = 1;
 * @return {number}
 */
proto.user.Work.prototype.getWorkKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Work} returns this
 */
proto.user.Work.prototype.setWorkKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 task_key = 2;
 * @return {number}
 */
proto.user.Work.prototype.getTaskKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Work} returns this
 */
proto.user.Work.prototype.setTaskKey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 worker_key = 3;
 * @return {number}
 */
proto.user.Work.prototype.getWorkerKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Work} returns this
 */
proto.user.Work.prototype.setWorkerKey = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 start_time = 4;
 * @return {number}
 */
proto.user.Work.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Work} returns this
 */
proto.user.Work.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 end_time = 5;
 * @return {number}
 */
proto.user.Work.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Work} returns this
 */
proto.user.Work.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.user.Work.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Work} returns this
 */
proto.user.Work.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Workstatus work_status = 7;
 * @return {!proto.user.Work.Workstatus}
 */
proto.user.Work.prototype.getWorkStatus = function() {
  return /** @type {!proto.user.Work.Workstatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.user.Work.Workstatus} value
 * @return {!proto.user.Work} returns this
 */
proto.user.Work.prototype.setWorkStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional bytes metadata = 8;
 * @return {!(string|Uint8Array)}
 */
proto.user.Work.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes metadata = 8;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Work.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Work.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Work} returns this
 */
proto.user.Work.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional string work_id = 9;
 * @return {string}
 */
proto.user.Work.prototype.getWorkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Work} returns this
 */
proto.user.Work.prototype.setWorkId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Works.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Works.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Works.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Works} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Works.toObject = function(includeInstance, msg) {
  var f, obj = {
    mworksList: jspb.Message.toObjectList(msg.getMworksList(),
    proto.user.Work.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Works}
 */
proto.user.Works.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Works;
  return proto.user.Works.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Works} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Works}
 */
proto.user.Works.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Work;
      reader.readMessage(value,proto.user.Work.deserializeBinaryFromReader);
      msg.addMworks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Works.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Works.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Works} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Works.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMworksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Work.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Work Mworks = 1;
 * @return {!Array<!proto.user.Work>}
 */
proto.user.Works.prototype.getMworksList = function() {
  return /** @type{!Array<!proto.user.Work>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Work, 1));
};


/**
 * @param {!Array<!proto.user.Work>} value
 * @return {!proto.user.Works} returns this
*/
proto.user.Works.prototype.setMworksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Work=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Work}
 */
proto.user.Works.prototype.addMworks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Work, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Works} returns this
 */
proto.user.Works.prototype.clearMworksList = function() {
  return this.setMworksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Delay.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Delay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Delay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Delay.toObject = function(includeInstance, msg) {
  var f, obj = {
    delayKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    delayId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    workKey: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startDate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endDate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    delayType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Delay}
 */
proto.user.Delay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Delay;
  return proto.user.Delay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Delay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Delay}
 */
proto.user.Delay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelayKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelayId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorkKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartDate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndDate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelayType(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Delay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Delay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Delay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Delay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelayKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDelayId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWorkKey();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getStartDate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEndDate();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getDelayType();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional int64 delay_key = 1;
 * @return {number}
 */
proto.user.Delay.prototype.getDelayKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Delay} returns this
 */
proto.user.Delay.prototype.setDelayKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string delay_id = 2;
 * @return {string}
 */
proto.user.Delay.prototype.getDelayId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Delay} returns this
 */
proto.user.Delay.prototype.setDelayId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 work_key = 3;
 * @return {number}
 */
proto.user.Delay.prototype.getWorkKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Delay} returns this
 */
proto.user.Delay.prototype.setWorkKey = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 start_date = 4;
 * @return {number}
 */
proto.user.Delay.prototype.getStartDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Delay} returns this
 */
proto.user.Delay.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 end_date = 5;
 * @return {number}
 */
proto.user.Delay.prototype.getEndDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Delay} returns this
 */
proto.user.Delay.prototype.setEndDate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 delay_type = 6;
 * @return {number}
 */
proto.user.Delay.prototype.getDelayType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Delay} returns this
 */
proto.user.Delay.prototype.setDelayType = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes metadata = 7;
 * @return {!(string|Uint8Array)}
 */
proto.user.Delay.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes metadata = 7;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Delay.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Delay.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Delay} returns this
 */
proto.user.Delay.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Delays.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Delays.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Delays.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Delays} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Delays.toObject = function(includeInstance, msg) {
  var f, obj = {
    mdelaysList: jspb.Message.toObjectList(msg.getMdelaysList(),
    proto.user.Delay.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Delays}
 */
proto.user.Delays.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Delays;
  return proto.user.Delays.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Delays} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Delays}
 */
proto.user.Delays.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Delay;
      reader.readMessage(value,proto.user.Delay.deserializeBinaryFromReader);
      msg.addMdelays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Delays.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Delays.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Delays} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Delays.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMdelaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Delay.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Delay Mdelays = 1;
 * @return {!Array<!proto.user.Delay>}
 */
proto.user.Delays.prototype.getMdelaysList = function() {
  return /** @type{!Array<!proto.user.Delay>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Delay, 1));
};


/**
 * @param {!Array<!proto.user.Delay>} value
 * @return {!proto.user.Delays} returns this
*/
proto.user.Delays.prototype.setMdelaysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Delay=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Delay}
 */
proto.user.Delays.prototype.addMdelays = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Delay, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Delays} returns this
 */
proto.user.Delays.prototype.clearMdelaysList = function() {
  return this.setMdelaysList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Service.repeatedFields_ = [14,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Service.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Service.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Service} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Service.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    price: jspb.Message.getFieldWithDefault(msg, 5, 0),
    deno: jspb.Message.getFieldWithDefault(msg, 6, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    workerKey: jspb.Message.getFieldWithDefault(msg, 9, 0),
    metadata: msg.getMetadata_asB64(),
    servicetype: jspb.Message.getFieldWithDefault(msg, 11, ""),
    location: msg.getLocation_asB64(),
    place: jspb.Message.getFieldWithDefault(msg, 13, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    categoryList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Service}
 */
proto.user.Service.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Service;
  return proto.user.Service.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Service}
 */
proto.user.Service.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServiceKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeno(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorkerKey(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicetype(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocation(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlace(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Service.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Service.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Service.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getServiceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDeno();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getWorkerKey();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getServicetype();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getLocation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getPlace();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getCategoryList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional int64 service_key = 1;
 * @return {number}
 */
proto.user.Service.prototype.getServiceKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setServiceKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string service_id = 2;
 * @return {string}
 */
proto.user.Service.prototype.getServiceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setServiceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.user.Service.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 created_at = 4;
 * @return {number}
 */
proto.user.Service.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 price = 5;
 * @return {number}
 */
proto.user.Service.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string deno = 6;
 * @return {string}
 */
proto.user.Service.prototype.getDeno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setDeno = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 duration = 8;
 * @return {number}
 */
proto.user.Service.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 worker_key = 9;
 * @return {number}
 */
proto.user.Service.prototype.getWorkerKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setWorkerKey = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes metadata = 10;
 * @return {!(string|Uint8Array)}
 */
proto.user.Service.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes metadata = 10;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Service.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Service.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional string servicetype = 11;
 * @return {string}
 */
proto.user.Service.prototype.getServicetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setServicetype = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bytes location = 12;
 * @return {!(string|Uint8Array)}
 */
proto.user.Service.prototype.getLocation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes location = 12;
 * This is a type-conversion wrapper around `getLocation()`
 * @return {string}
 */
proto.user.Service.prototype.getLocation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocation()));
};


/**
 * optional bytes location = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocation()`
 * @return {!Uint8Array}
 */
proto.user.Service.prototype.getLocation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setLocation = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional string place = 13;
 * @return {string}
 */
proto.user.Service.prototype.getPlace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setPlace = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * repeated string tags = 14;
 * @return {!Array<string>}
 */
proto.user.Service.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated string category = 7;
 * @return {!Array<string>}
 */
proto.user.Service.prototype.getCategoryList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.setCategoryList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.addCategory = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Service} returns this
 */
proto.user.Service.prototype.clearCategoryList = function() {
  return this.setCategoryList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Services.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Services.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Services.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Services} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Services.toObject = function(includeInstance, msg) {
  var f, obj = {
    mservicesList: jspb.Message.toObjectList(msg.getMservicesList(),
    proto.user.Service.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Services}
 */
proto.user.Services.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Services;
  return proto.user.Services.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Services} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Services}
 */
proto.user.Services.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Service;
      reader.readMessage(value,proto.user.Service.deserializeBinaryFromReader);
      msg.addMservices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Services.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Services.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Services} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Services.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMservicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Service.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Service Mservices = 1;
 * @return {!Array<!proto.user.Service>}
 */
proto.user.Services.prototype.getMservicesList = function() {
  return /** @type{!Array<!proto.user.Service>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Service, 1));
};


/**
 * @param {!Array<!proto.user.Service>} value
 * @return {!proto.user.Services} returns this
*/
proto.user.Services.prototype.setMservicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Service=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Service}
 */
proto.user.Services.prototype.addMservices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Service, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Services} returns this
 */
proto.user.Services.prototype.clearMservicesList = function() {
  return this.setMservicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Invoice.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Invoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Invoice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Invoice.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoiceKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    invoiceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    taskKey: jspb.Message.getFieldWithDefault(msg, 3, 0),
    invoiceDate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Invoice}
 */
proto.user.Invoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Invoice;
  return proto.user.Invoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Invoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Invoice}
 */
proto.user.Invoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInvoiceKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvoiceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInvoiceDate(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Invoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Invoice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Invoice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Invoice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoiceKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getInvoiceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTaskKey();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getInvoiceDate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional int64 invoice_key = 1;
 * @return {number}
 */
proto.user.Invoice.prototype.getInvoiceKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Invoice} returns this
 */
proto.user.Invoice.prototype.setInvoiceKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string invoice_id = 2;
 * @return {string}
 */
proto.user.Invoice.prototype.getInvoiceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Invoice} returns this
 */
proto.user.Invoice.prototype.setInvoiceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 task_key = 3;
 * @return {number}
 */
proto.user.Invoice.prototype.getTaskKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Invoice} returns this
 */
proto.user.Invoice.prototype.setTaskKey = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 invoice_date = 4;
 * @return {number}
 */
proto.user.Invoice.prototype.getInvoiceDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Invoice} returns this
 */
proto.user.Invoice.prototype.setInvoiceDate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes metadata = 5;
 * @return {!(string|Uint8Array)}
 */
proto.user.Invoice.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes metadata = 5;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Invoice.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Invoice.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Invoice} returns this
 */
proto.user.Invoice.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Invoices.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Invoices.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Invoices.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Invoices} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Invoices.toObject = function(includeInstance, msg) {
  var f, obj = {
    minvoicesList: jspb.Message.toObjectList(msg.getMinvoicesList(),
    proto.user.Invoice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Invoices}
 */
proto.user.Invoices.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Invoices;
  return proto.user.Invoices.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Invoices} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Invoices}
 */
proto.user.Invoices.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Invoice;
      reader.readMessage(value,proto.user.Invoice.deserializeBinaryFromReader);
      msg.addMinvoices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Invoices.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Invoices.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Invoices} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Invoices.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinvoicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Invoice.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Invoice Minvoices = 1;
 * @return {!Array<!proto.user.Invoice>}
 */
proto.user.Invoices.prototype.getMinvoicesList = function() {
  return /** @type{!Array<!proto.user.Invoice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Invoice, 1));
};


/**
 * @param {!Array<!proto.user.Invoice>} value
 * @return {!proto.user.Invoices} returns this
*/
proto.user.Invoices.prototype.setMinvoicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Invoice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Invoice}
 */
proto.user.Invoices.prototype.addMinvoices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Invoice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Invoices} returns this
 */
proto.user.Invoices.prototype.clearMinvoicesList = function() {
  return this.setMinvoicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Guarantee.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Guarantee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Guarantee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Guarantee.toObject = function(includeInstance, msg) {
  var f, obj = {
    guaranteeKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    taskKey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startDate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Guarantee}
 */
proto.user.Guarantee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Guarantee;
  return proto.user.Guarantee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Guarantee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Guarantee}
 */
proto.user.Guarantee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGuaranteeKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartDate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Guarantee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Guarantee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Guarantee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Guarantee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuaranteeKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTaskKey();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStartDate();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional int64 guarantee_key = 1;
 * @return {number}
 */
proto.user.Guarantee.prototype.getGuaranteeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Guarantee} returns this
 */
proto.user.Guarantee.prototype.setGuaranteeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 task_key = 2;
 * @return {number}
 */
proto.user.Guarantee.prototype.getTaskKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Guarantee} returns this
 */
proto.user.Guarantee.prototype.setTaskKey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 start_date = 3;
 * @return {number}
 */
proto.user.Guarantee.prototype.getStartDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Guarantee} returns this
 */
proto.user.Guarantee.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 duration = 4;
 * @return {number}
 */
proto.user.Guarantee.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Guarantee} returns this
 */
proto.user.Guarantee.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes metadata = 5;
 * @return {!(string|Uint8Array)}
 */
proto.user.Guarantee.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes metadata = 5;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Guarantee.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Guarantee.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Guarantee} returns this
 */
proto.user.Guarantee.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Guarantees.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Guarantees.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Guarantees.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Guarantees} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Guarantees.toObject = function(includeInstance, msg) {
  var f, obj = {
    mguaranteesList: jspb.Message.toObjectList(msg.getMguaranteesList(),
    proto.user.Guarantee.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Guarantees}
 */
proto.user.Guarantees.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Guarantees;
  return proto.user.Guarantees.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Guarantees} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Guarantees}
 */
proto.user.Guarantees.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Guarantee;
      reader.readMessage(value,proto.user.Guarantee.deserializeBinaryFromReader);
      msg.addMguarantees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Guarantees.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Guarantees.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Guarantees} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Guarantees.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMguaranteesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Guarantee.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Guarantee Mguarantees = 1;
 * @return {!Array<!proto.user.Guarantee>}
 */
proto.user.Guarantees.prototype.getMguaranteesList = function() {
  return /** @type{!Array<!proto.user.Guarantee>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Guarantee, 1));
};


/**
 * @param {!Array<!proto.user.Guarantee>} value
 * @return {!proto.user.Guarantees} returns this
*/
proto.user.Guarantees.prototype.setMguaranteesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Guarantee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Guarantee}
 */
proto.user.Guarantees.prototype.addMguarantees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Guarantee, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Guarantees} returns this
 */
proto.user.Guarantees.prototype.clearMguaranteesList = function() {
  return this.setMguaranteesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Bid.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Bid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Bid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Bid.toObject = function(includeInstance, msg) {
  var f, obj = {
    bidKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bidId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    taskKey: jspb.Message.getFieldWithDefault(msg, 3, 0),
    workerKey: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bidprice: jspb.Message.getFieldWithDefault(msg, 5, 0),
    completionTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    availableAt: jspb.Message.getFieldWithDefault(msg, 7, 0),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Bid}
 */
proto.user.Bid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Bid;
  return proto.user.Bid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Bid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Bid}
 */
proto.user.Bid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBidKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBidId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorkerKey(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBidprice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompletionTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAvailableAt(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Bid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Bid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Bid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Bid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBidKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBidId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTaskKey();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getWorkerKey();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getBidprice();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCompletionTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getAvailableAt();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional int64 bid_key = 1;
 * @return {number}
 */
proto.user.Bid.prototype.getBidKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Bid} returns this
 */
proto.user.Bid.prototype.setBidKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string bid_id = 2;
 * @return {string}
 */
proto.user.Bid.prototype.getBidId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Bid} returns this
 */
proto.user.Bid.prototype.setBidId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 task_key = 3;
 * @return {number}
 */
proto.user.Bid.prototype.getTaskKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Bid} returns this
 */
proto.user.Bid.prototype.setTaskKey = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 worker_key = 4;
 * @return {number}
 */
proto.user.Bid.prototype.getWorkerKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Bid} returns this
 */
proto.user.Bid.prototype.setWorkerKey = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 bidprice = 5;
 * @return {number}
 */
proto.user.Bid.prototype.getBidprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Bid} returns this
 */
proto.user.Bid.prototype.setBidprice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 completion_time = 6;
 * @return {number}
 */
proto.user.Bid.prototype.getCompletionTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Bid} returns this
 */
proto.user.Bid.prototype.setCompletionTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 available_at = 7;
 * @return {number}
 */
proto.user.Bid.prototype.getAvailableAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Bid} returns this
 */
proto.user.Bid.prototype.setAvailableAt = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes metadata = 8;
 * @return {!(string|Uint8Array)}
 */
proto.user.Bid.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes metadata = 8;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Bid.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Bid.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Bid} returns this
 */
proto.user.Bid.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Bids.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Bids.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Bids.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Bids} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Bids.toObject = function(includeInstance, msg) {
  var f, obj = {
    mbidsList: jspb.Message.toObjectList(msg.getMbidsList(),
    proto.user.Bid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Bids}
 */
proto.user.Bids.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Bids;
  return proto.user.Bids.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Bids} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Bids}
 */
proto.user.Bids.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Bid;
      reader.readMessage(value,proto.user.Bid.deserializeBinaryFromReader);
      msg.addMbids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Bids.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Bids.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Bids} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Bids.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMbidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Bid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Bid Mbids = 1;
 * @return {!Array<!proto.user.Bid>}
 */
proto.user.Bids.prototype.getMbidsList = function() {
  return /** @type{!Array<!proto.user.Bid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Bid, 1));
};


/**
 * @param {!Array<!proto.user.Bid>} value
 * @return {!proto.user.Bids} returns this
*/
proto.user.Bids.prototype.setMbidsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Bid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Bid}
 */
proto.user.Bids.prototype.addMbids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Bid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Bids} returns this
 */
proto.user.Bids.prototype.clearMbidsList = function() {
  return this.setMbidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Biditem.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Biditem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Biditem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Biditem.toObject = function(includeInstance, msg) {
  var f, obj = {
    bidKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bidId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemKey: jspb.Message.getFieldWithDefault(msg, 3, 0),
    customerKey: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bidprice: jspb.Message.getFieldWithDefault(msg, 5, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    bidMessage: jspb.Message.getFieldWithDefault(msg, 7, ""),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Biditem}
 */
proto.user.Biditem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Biditem;
  return proto.user.Biditem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Biditem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Biditem}
 */
proto.user.Biditem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBidKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBidId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCustomerKey(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBidprice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBidMessage(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Biditem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Biditem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Biditem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Biditem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBidKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBidId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemKey();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCustomerKey();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getBidprice();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getBidMessage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional int64 bid_key = 1;
 * @return {number}
 */
proto.user.Biditem.prototype.getBidKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Biditem} returns this
 */
proto.user.Biditem.prototype.setBidKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string bid_id = 2;
 * @return {string}
 */
proto.user.Biditem.prototype.getBidId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Biditem} returns this
 */
proto.user.Biditem.prototype.setBidId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 item_key = 3;
 * @return {number}
 */
proto.user.Biditem.prototype.getItemKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Biditem} returns this
 */
proto.user.Biditem.prototype.setItemKey = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 customer_key = 4;
 * @return {number}
 */
proto.user.Biditem.prototype.getCustomerKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Biditem} returns this
 */
proto.user.Biditem.prototype.setCustomerKey = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 bidprice = 5;
 * @return {number}
 */
proto.user.Biditem.prototype.getBidprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Biditem} returns this
 */
proto.user.Biditem.prototype.setBidprice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 created_at = 6;
 * @return {number}
 */
proto.user.Biditem.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Biditem} returns this
 */
proto.user.Biditem.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string bid_message = 7;
 * @return {string}
 */
proto.user.Biditem.prototype.getBidMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Biditem} returns this
 */
proto.user.Biditem.prototype.setBidMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes metadata = 8;
 * @return {!(string|Uint8Array)}
 */
proto.user.Biditem.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes metadata = 8;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Biditem.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Biditem.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Biditem} returns this
 */
proto.user.Biditem.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Biditems.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Biditems.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Biditems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Biditems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Biditems.toObject = function(includeInstance, msg) {
  var f, obj = {
    mbiditemsList: jspb.Message.toObjectList(msg.getMbiditemsList(),
    proto.user.Biditem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Biditems}
 */
proto.user.Biditems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Biditems;
  return proto.user.Biditems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Biditems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Biditems}
 */
proto.user.Biditems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Biditem;
      reader.readMessage(value,proto.user.Biditem.deserializeBinaryFromReader);
      msg.addMbiditems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Biditems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Biditems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Biditems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Biditems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMbiditemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Biditem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Biditem Mbiditems = 1;
 * @return {!Array<!proto.user.Biditem>}
 */
proto.user.Biditems.prototype.getMbiditemsList = function() {
  return /** @type{!Array<!proto.user.Biditem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Biditem, 1));
};


/**
 * @param {!Array<!proto.user.Biditem>} value
 * @return {!proto.user.Biditems} returns this
*/
proto.user.Biditems.prototype.setMbiditemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Biditem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Biditem}
 */
proto.user.Biditems.prototype.addMbiditems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Biditem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Biditems} returns this
 */
proto.user.Biditems.prototype.clearMbiditemsList = function() {
  return this.setMbiditemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    addressId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    addressLine1: jspb.Message.getFieldWithDefault(msg, 3, ""),
    addressLine2: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    state: jspb.Message.getFieldWithDefault(msg, 6, ""),
    country: jspb.Message.getFieldWithDefault(msg, 7, ""),
    pincode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    location: msg.getLocation_asB64(),
    landmark: jspb.Message.getFieldWithDefault(msg, 10, ""),
    metadata: msg.getMetadata_asB64(),
    customerKey: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Address}
 */
proto.user.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Address;
  return proto.user.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Address}
 */
proto.user.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddressKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddressId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddressLine1(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddressLine2(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPincode(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocation(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLandmark(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCustomerKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAddressId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddressLine1();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddressLine2();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPincode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLocation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getLandmark();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getCustomerKey();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
};


/**
 * optional int64 address_key = 1;
 * @return {number}
 */
proto.user.Address.prototype.getAddressKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setAddressKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string address_id = 2;
 * @return {string}
 */
proto.user.Address.prototype.getAddressId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setAddressId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string address_line_1 = 3;
 * @return {string}
 */
proto.user.Address.prototype.getAddressLine1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setAddressLine1 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string address_line_2 = 4;
 * @return {string}
 */
proto.user.Address.prototype.getAddressLine2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setAddressLine2 = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.user.Address.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string state = 6;
 * @return {string}
 */
proto.user.Address.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string country = 7;
 * @return {string}
 */
proto.user.Address.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string pincode = 8;
 * @return {string}
 */
proto.user.Address.prototype.getPincode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setPincode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bytes location = 9;
 * @return {!(string|Uint8Array)}
 */
proto.user.Address.prototype.getLocation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes location = 9;
 * This is a type-conversion wrapper around `getLocation()`
 * @return {string}
 */
proto.user.Address.prototype.getLocation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocation()));
};


/**
 * optional bytes location = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocation()`
 * @return {!Uint8Array}
 */
proto.user.Address.prototype.getLocation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setLocation = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional string landmark = 10;
 * @return {string}
 */
proto.user.Address.prototype.getLandmark = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setLandmark = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bytes metadata = 11;
 * @return {!(string|Uint8Array)}
 */
proto.user.Address.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes metadata = 11;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Address.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Address.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional int64 customer_key = 12;
 * @return {number}
 */
proto.user.Address.prototype.getCustomerKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Address} returns this
 */
proto.user.Address.prototype.setCustomerKey = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Addresses.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Addresses.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Addresses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Addresses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Addresses.toObject = function(includeInstance, msg) {
  var f, obj = {
    maddressesList: jspb.Message.toObjectList(msg.getMaddressesList(),
    proto.user.Address.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Addresses}
 */
proto.user.Addresses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Addresses;
  return proto.user.Addresses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Addresses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Addresses}
 */
proto.user.Addresses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Address;
      reader.readMessage(value,proto.user.Address.deserializeBinaryFromReader);
      msg.addMaddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Addresses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Addresses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Addresses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Addresses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Address.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Address Maddresses = 1;
 * @return {!Array<!proto.user.Address>}
 */
proto.user.Addresses.prototype.getMaddressesList = function() {
  return /** @type{!Array<!proto.user.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Address, 1));
};


/**
 * @param {!Array<!proto.user.Address>} value
 * @return {!proto.user.Addresses} returns this
*/
proto.user.Addresses.prototype.setMaddressesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Address}
 */
proto.user.Addresses.prototype.addMaddresses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Address, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Addresses} returns this
 */
proto.user.Addresses.prototype.clearMaddressesList = function() {
  return this.setMaddressesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Item.repeatedFields_ = [10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    itemId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customerKey: jspb.Message.getFieldWithDefault(msg, 3, 0),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 5, 0),
    price: jspb.Message.getFieldWithDefault(msg, 6, 0),
    deno: jspb.Message.getFieldWithDefault(msg, 7, ""),
    negotiable: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    metadata: msg.getMetadata_asB64(),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    categoryList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    place: jspb.Message.getFieldWithDefault(msg, 12, ""),
    title: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Item}
 */
proto.user.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Item;
  return proto.user.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Item}
 */
proto.user.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCustomerKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeno(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNegotiable(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addCategory(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlace(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomerKey();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getDeno();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getNegotiable();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getCategoryList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getPlace();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional int64 item_key = 1;
 * @return {number}
 */
proto.user.Item.prototype.getItemKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setItemKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string item_id = 2;
 * @return {string}
 */
proto.user.Item.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setItemId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 customer_key = 3;
 * @return {number}
 */
proto.user.Item.prototype.getCustomerKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setCustomerKey = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.user.Item.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 created_at = 5;
 * @return {number}
 */
proto.user.Item.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 price = 6;
 * @return {number}
 */
proto.user.Item.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string deno = 7;
 * @return {string}
 */
proto.user.Item.prototype.getDeno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setDeno = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool negotiable = 8;
 * @return {boolean}
 */
proto.user.Item.prototype.getNegotiable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setNegotiable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bytes metadata = 9;
 * @return {!(string|Uint8Array)}
 */
proto.user.Item.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes metadata = 9;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Item.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Item.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * repeated string tags = 10;
 * @return {!Array<string>}
 */
proto.user.Item.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated string category = 11;
 * @return {!Array<string>}
 */
proto.user.Item.prototype.getCategoryList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setCategoryList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.addCategory = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.clearCategoryList = function() {
  return this.setCategoryList([]);
};


/**
 * optional string place = 12;
 * @return {string}
 */
proto.user.Item.prototype.getPlace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setPlace = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string title = 13;
 * @return {string}
 */
proto.user.Item.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Item} returns this
 */
proto.user.Item.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Items.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Items.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Items.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Items} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Items.toObject = function(includeInstance, msg) {
  var f, obj = {
    mitemsList: jspb.Message.toObjectList(msg.getMitemsList(),
    proto.user.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Items}
 */
proto.user.Items.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Items;
  return proto.user.Items.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Items} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Items}
 */
proto.user.Items.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Item;
      reader.readMessage(value,proto.user.Item.deserializeBinaryFromReader);
      msg.addMitems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Items.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Items.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Items} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Items.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMitemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Item.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Item Mitems = 1;
 * @return {!Array<!proto.user.Item>}
 */
proto.user.Items.prototype.getMitemsList = function() {
  return /** @type{!Array<!proto.user.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Item, 1));
};


/**
 * @param {!Array<!proto.user.Item>} value
 * @return {!proto.user.Items} returns this
*/
proto.user.Items.prototype.setMitemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Item}
 */
proto.user.Items.prototype.addMitems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Items} returns this
 */
proto.user.Items.prototype.clearMitemsList = function() {
  return this.setMitemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Booking.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Booking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Booking} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Booking.toObject = function(includeInstance, msg) {
  var f, obj = {
    bookingKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bookingId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customerKey: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lender: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bookingPrice: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bookingTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    place: jspb.Message.getFieldWithDefault(msg, 7, ""),
    location: msg.getLocation_asB64(),
    metadata: msg.getMetadata_asB64(),
    bookFrom: jspb.Message.getFieldWithDefault(msg, 10, 0),
    bookTo: jspb.Message.getFieldWithDefault(msg, 11, 0),
    itemKey: jspb.Message.getFieldWithDefault(msg, 12, 0),
    status: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Booking}
 */
proto.user.Booking.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Booking;
  return proto.user.Booking.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Booking} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Booking}
 */
proto.user.Booking.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBookingKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBookingId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCustomerKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLender(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBookingPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBookingTime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlace(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocation(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBookFrom(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBookTo(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemKey(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Booking.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Booking.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Booking} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Booking.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBookingKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBookingId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomerKey();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLender();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getBookingPrice();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBookingTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPlace();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLocation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getBookFrom();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getBookTo();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getItemKey();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional int64 booking_key = 1;
 * @return {number}
 */
proto.user.Booking.prototype.getBookingKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setBookingKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string booking_id = 2;
 * @return {string}
 */
proto.user.Booking.prototype.getBookingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setBookingId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 customer_key = 3;
 * @return {number}
 */
proto.user.Booking.prototype.getCustomerKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setCustomerKey = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 lender = 4;
 * @return {number}
 */
proto.user.Booking.prototype.getLender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setLender = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 booking_price = 5;
 * @return {number}
 */
proto.user.Booking.prototype.getBookingPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setBookingPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 booking_time = 6;
 * @return {number}
 */
proto.user.Booking.prototype.getBookingTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setBookingTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string place = 7;
 * @return {string}
 */
proto.user.Booking.prototype.getPlace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setPlace = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes location = 8;
 * @return {!(string|Uint8Array)}
 */
proto.user.Booking.prototype.getLocation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes location = 8;
 * This is a type-conversion wrapper around `getLocation()`
 * @return {string}
 */
proto.user.Booking.prototype.getLocation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocation()));
};


/**
 * optional bytes location = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocation()`
 * @return {!Uint8Array}
 */
proto.user.Booking.prototype.getLocation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setLocation = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes metadata = 9;
 * @return {!(string|Uint8Array)}
 */
proto.user.Booking.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes metadata = 9;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Booking.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Booking.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional int64 book_from = 10;
 * @return {number}
 */
proto.user.Booking.prototype.getBookFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setBookFrom = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 book_to = 11;
 * @return {number}
 */
proto.user.Booking.prototype.getBookTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setBookTo = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 item_key = 12;
 * @return {number}
 */
proto.user.Booking.prototype.getItemKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setItemKey = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 status = 13;
 * @return {number}
 */
proto.user.Booking.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Booking} returns this
 */
proto.user.Booking.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Bookings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Bookings.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Bookings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Bookings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Bookings.toObject = function(includeInstance, msg) {
  var f, obj = {
    mbookingsList: jspb.Message.toObjectList(msg.getMbookingsList(),
    proto.user.Booking.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Bookings}
 */
proto.user.Bookings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Bookings;
  return proto.user.Bookings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Bookings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Bookings}
 */
proto.user.Bookings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Booking;
      reader.readMessage(value,proto.user.Booking.deserializeBinaryFromReader);
      msg.addMbookings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Bookings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Bookings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Bookings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Bookings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMbookingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Booking.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Booking Mbookings = 1;
 * @return {!Array<!proto.user.Booking>}
 */
proto.user.Bookings.prototype.getMbookingsList = function() {
  return /** @type{!Array<!proto.user.Booking>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Booking, 1));
};


/**
 * @param {!Array<!proto.user.Booking>} value
 * @return {!proto.user.Bookings} returns this
*/
proto.user.Bookings.prototype.setMbookingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Booking=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Booking}
 */
proto.user.Bookings.prototype.addMbookings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Booking, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Bookings} returns this
 */
proto.user.Bookings.prototype.clearMbookingsList = function() {
  return this.setMbookingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Confirmcode.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Confirmcode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Confirmcode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Confirmcode.toObject = function(includeInstance, msg) {
  var f, obj = {
    bookingKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confirmCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    confirmNcode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Confirmcode}
 */
proto.user.Confirmcode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Confirmcode;
  return proto.user.Confirmcode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Confirmcode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Confirmcode}
 */
proto.user.Confirmcode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBookingKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmNcode(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Confirmcode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Confirmcode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Confirmcode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Confirmcode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBookingKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getConfirmCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfirmNcode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional int64 booking_key = 1;
 * @return {number}
 */
proto.user.Confirmcode.prototype.getBookingKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.Confirmcode} returns this
 */
proto.user.Confirmcode.prototype.setBookingKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string confirm_code = 2;
 * @return {string}
 */
proto.user.Confirmcode.prototype.getConfirmCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Confirmcode} returns this
 */
proto.user.Confirmcode.prototype.setConfirmCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string confirm_ncode = 3;
 * @return {string}
 */
proto.user.Confirmcode.prototype.getConfirmNcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.Confirmcode} returns this
 */
proto.user.Confirmcode.prototype.setConfirmNcode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes metadata = 4;
 * @return {!(string|Uint8Array)}
 */
proto.user.Confirmcode.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes metadata = 4;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.user.Confirmcode.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.user.Confirmcode.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.user.Confirmcode} returns this
 */
proto.user.Confirmcode.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.Confirmcodes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.Confirmcodes.prototype.toObject = function(opt_includeInstance) {
  return proto.user.Confirmcodes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.Confirmcodes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Confirmcodes.toObject = function(includeInstance, msg) {
  var f, obj = {
    mconfirmcodesList: jspb.Message.toObjectList(msg.getMconfirmcodesList(),
    proto.user.Confirmcode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Confirmcodes}
 */
proto.user.Confirmcodes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Confirmcodes;
  return proto.user.Confirmcodes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Confirmcodes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Confirmcodes}
 */
proto.user.Confirmcodes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.Confirmcode;
      reader.readMessage(value,proto.user.Confirmcode.deserializeBinaryFromReader);
      msg.addMconfirmcodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Confirmcodes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.Confirmcodes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Confirmcodes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Confirmcodes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMconfirmcodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.Confirmcode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Confirmcode Mconfirmcodes = 1;
 * @return {!Array<!proto.user.Confirmcode>}
 */
proto.user.Confirmcodes.prototype.getMconfirmcodesList = function() {
  return /** @type{!Array<!proto.user.Confirmcode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.Confirmcode, 1));
};


/**
 * @param {!Array<!proto.user.Confirmcode>} value
 * @return {!proto.user.Confirmcodes} returns this
*/
proto.user.Confirmcodes.prototype.setMconfirmcodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.Confirmcode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Confirmcode}
 */
proto.user.Confirmcodes.prototype.addMconfirmcodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.Confirmcode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.Confirmcodes} returns this
 */
proto.user.Confirmcodes.prototype.clearMconfirmcodesList = function() {
  return this.setMconfirmcodesList([]);
};


goog.object.extend(exports, proto.user);
